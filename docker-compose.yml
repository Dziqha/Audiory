version: '3.8'

services:
  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GRPC_SERVER_PORT=50051
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=userservice
      - ENV=development
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  music-service:
    build:
      context: ./MusicService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - microservices-network
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GRPC_SERVER_PORT=50051
      - ENV=development
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-root}
      POSTGRES_DB: userservice
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: